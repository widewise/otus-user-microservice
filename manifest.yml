apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-configmap
  namespace: otus
data:
  POSTGRES_DB: postgres

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  namespace: otus
  labels:
    type: local
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 1Gi
  hostPath:
    path: /var/lib/postgresql/data

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: otus
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: otus
  labels:
    app: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      volumes:
        - name: postgres-pv-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
      containers:
      - name: postgres
        image: postgres:latest
        ports:
          - containerPort: 5432
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 200m
            memory: 200Mi
        envFrom:
        - secretRef:
            name: postgres-secrets
        - configMapRef:
            name: postgres-configmap
        volumeMounts:
              - mountPath: "/var/lib/postgresql/data"
                name: postgres-pv-storage

---

apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: otus
spec:
 type: ClusterIP
 ports:
  - name: postgres
    port: 5432
    targetPort: 5432
 selector:
   app: postgres

---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: userapp
  name: userapp
  namespace: otus
spec:
  replicas: 3
  selector:
    matchLabels:
      app: userapp
  template:
    metadata:
      labels:
        app: userapp
    spec:
      containers:
      - name: userapp
        image: docker.io/widedreadnout/otus-microservice-user
        ports:
          - containerPort: 8000
        volumeMounts:
          - name: secrets
            mountPath: /app/secrets
            readOnly: true
      volumes:
      - name: secrets
        secret:
          secretName: secret-appsettings

---

apiVersion: v1
kind: Service
metadata:
  name: userapp-service
  namespace: otus

spec:
  ports:
  - port: 80
    protocol: TCP
  selector:
    app: userapp
  type: NodePort

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: userapp-ingress
  namespace: otus
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: "arch.homework"
    http:
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: userapp-service
              port:
                number: 80